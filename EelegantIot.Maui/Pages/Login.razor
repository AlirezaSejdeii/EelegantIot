@page "/login"
<PageTitle>ورود به حساب کاربری</PageTitle>
<MudPaper Class="d-flex flex-column m-5 justify-content-center align-content-end">
    <MudItem>
        @if (!IsLoading)
        {
            <EditForm Model="_request" OnValidSubmit="LoginOrCreateAccount">
                <FluentValidationValidator></FluentValidationValidator>
                <MudCardContent>
                    <MudTextField Label="نام کاربری" @bind-Value="_request.Username" For="(() => _request.Username)"/>
                    <MudTextField InputType="InputType.Password" Label="کلمه عبور" @bind-Value="_request.Password" For="(() => _request.Password)"/>

                    <MudButton FullWidth ButtonType="ButtonType.Submit" Color="Color.Info" EndIcon="@Icons.Material.Filled.Login">ورود</MudButton>
                </MudCardContent>
            </EditForm>
        }
        else
        {
            <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="60px" Class="mt-6" />
            <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="60px" Class="mt-6" />
        }
    </MudItem>
</MudPaper>

@code {
    [Inject] public UserService UserService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    public bool IsLoading { get; set; }
    LoginRequest _request = new();

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsLoggedIn())
        {
            NavigationManager.NavigateTo("/devices");
        }
    }

    public async Task LoginOrCreateAccount()
    {
        IsLoading = true;
        string? error = await UserService.LoginOrSignUpUser(_request.Username, _request.Password);
        if (error is not null)
        {
            Snackbar.Add(severity: Severity.Error, message: error);
        }
        else
        {
            NavigationManager.NavigateTo("/devices");
        }
        IsLoading = false;
    }

}