@page "/device-detail/{Id:guid}"
@implements IAsyncDisposable
@using EelegantIot.Shared.Requests.DeviceDetails
@using Microsoft.AspNetCore.SignalR.Client
@using EelegantIot.Shared.Hubs
@using Microsoft.AspNetCore.Http.Connections
@using EelegantIot.Shared
@using EelegantIot.Shared.Requests.UpdateDevice
@attribute [Authorize]

@if (!_loading)
{
    <MudCard Class="mt-3" Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.h6">دما و رطوبت</MudText>
        </MudCardHeader>
        <MudDivider DividerType="DividerType.FullWidth" Light="false"></MudDivider>
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">دما</MudText>
                <MudText Typo="Typo.h6">@_item.Temperature</MudText>
            </MudStack>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">رطوبت</MudText>
                <MudText Typo="Typo.h6">@_item.Humidity</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>

    <MudCard Class="mt-3" Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.h6">جریان و ولتاژ</MudText>
        </MudCardHeader>
        <MudDivider DividerType="DividerType.FullWidth" Light="false"></MudDivider>
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">جریان</MudText>
                <MudText Typo="Typo.h6">@_item.Current</MudText>
            </MudStack>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">ولتاژ</MudText>
                <MudText Typo="Typo.h6">@_item.Voltage</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudButton FullWidth Color="Color.Primary" Variant="Variant.Filled" Class="mt-3" OnClick="ToggleManually">
        @if (_item.SettingMode is SettingMode.Manual)
        {
            @if (_item.IsOn)
            {
                <span>خاموش کن</span>
            }
            else
            {
                <span>روشن کن</span>
            }
        }
        else
        {
            <span>تعغیر به حالت دستی</span>
        }
    </MudButton>

    <hr>
    <MudContainer Fixed="true" Class="m-3">
        @if (_item.IsOn)
        {
            <MudCard Class="mud-theme-primary z-10 p-3">
                <MudText Align="Align.Right">وضعیت دستگاه: دستگاه روشن است</MudText>
            </MudCard>
        }
        else
        {
            <MudCard Class="mud-theme-dark z-10 p-3">
                <MudText Align="Align.Right">وضعیت دستگاه: دستگاه خاموش است</MudText>
            </MudCard>
        }
    </MudContainer>
    <hr>
    <MudCard Class="mt-3" Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.h6">تنظیمات تایمر</MudText>
        </MudCardHeader>
        <MudDivider DividerType="DividerType.FullWidth" Light="false"></MudDivider>
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">تایمر</MudText>
                <MudSwitch Color="Color.Primary" Value="@isTimerOn" ReadOnly></MudSwitch>
            </MudStack>

            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">زمان شروع</MudText>
                <MudTimePicker @bind-Time="startAt" AmPm="false"></MudTimePicker>
            </MudStack>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                <MudText Typo="Typo.h6">زمان پایان</MudText>
                <MudTimePicker @bind-Time="endAt" AmPm="false"></MudTimePicker>
            </MudStack>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2 m-2">
                <MudText Typo="Typo.h6">تکرار</MudText>
                <MudGrid Justify="Justify.Center">
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => saturdaySelected = !saturdaySelected)" Color="saturdaySelected ? Color.Primary : Color.Dark">شنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => sundaySelected = !sundaySelected)" Color="sundaySelected ? Color.Primary : Color.Dark">یکشنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => mondaySelected = !mondaySelected)" Color="mondaySelected ? Color.Primary : Color.Dark">دوشنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => tuesdaySelected = !tuesdaySelected)" Color="tuesdaySelected ? Color.Primary : Color.Dark">سه شنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => wednesdaySelected = !wednesdaySelected)" Color="wednesdaySelected ? Color.Primary : Color.Dark">چهار شنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => thursdaySelected = !thursdaySelected)" Color="thursdaySelected ? Color.Primary : Color.Dark">پنج شنبه</MudButton>
                    <MudButton Class="m-1" Variant="Variant.Filled" OnClick="(() => fridaySelected = !fridaySelected)" Color="fridaySelected ? Color.Primary : Color.Dark">جمعه</MudButton>
                </MudGrid>
            </MudStack>
            <MudButton FullWidth Color="Color.Primary" Variant="Variant.Filled" Class="mt-3" OnClick="UpdateTimer">
                ذخیره و روشن کردن تایمر
            </MudButton>
        </MudCardContent>
    </MudCard>

    <MudCard Class="mt-3" Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.h6">نمودار دما</MudText>
        </MudCardHeader>
        <MudDivider DividerType="DividerType.FullWidth" Light="false"></MudDivider>
        <MudCardContent>
            <MudButton FullWidth StartIcon="@Icons.Material.Outlined.DateRange" OnClick="OpenDatePickerDialog">نمایش نمودار</MudButton>
        </MudCardContent>
    </MudCard>
    <MudButton OnClick="@DeleteDevice" FullWidth StartIcon="@Icons.Material.Outlined.Delete" Class="mt-3 mb-3" Color="Color.Error" Variant="Variant.Filled">حذف دستگاه</MudButton>
}
else
{
    <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Height="220px" Class="mt-6"/>
    <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Height="220px" Class="mt-6"/>
}

@code {
    bool saturdaySelected;
    bool sundaySelected;
    bool mondaySelected;
    bool tuesdaySelected;
    bool wednesdaySelected;
    bool thursdaySelected;
    bool fridaySelected;

    bool isTimerOn;
    bool _loading;

    TimeSpan? startAt;
    TimeSpan? endAt;
    [Inject] public IDialogService DialogService { get; set; }
    [Inject] public DeviceService DeviceService { get; set; }
    [Inject] public UserService UserService { get; set; }
    [Inject] public ISnackbar SnackbarService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Parameter] public Guid Id { get; set; }
    DeviceDetailsDto _item;
    HubConnection connection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        HubConnectionBuilder hubConnectionBuilder = new();
        string token = await UserService.GetLoginToken();
        connection = hubConnectionBuilder.WithUrl(Config.WebSocket, options =>
            {
                options.SkipNegotiation = true;
                options.Transports = HttpTransportType.WebSockets;
                options.AccessTokenProvider = () => Task.FromResult(token)!;
            })
            .Build();
        hubConnectionBuilder.WithAutomaticReconnect();

        await connection.StartAsync().ContinueWith(task =>
        {
            if (task.IsFaulted)
            {
                Console.WriteLine("Failed to connect websocket");
            }
            else
            {
                Console.WriteLine("Connected");
            }
        });

        connection.On<DeviceHubUpdateDto>("OnDeviceUpdated", UpdatePage);
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        ResponseData<DeviceDetailsDto> result = await DeviceService.GetDeviceById(Id);
        if (!result.Success)
        {
            SnackbarService.Add(result.Error!.ErrorMessage, Severity.Error);
        }

        _item = result.Data!;

        if (_item.WorkingDays != null)
        {
            saturdaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Saturday);
            sundaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Sunday);
            mondaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Monday);
            tuesdaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Tuesday);
            wednesdaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Wednesday);
            thursdaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Thursday);
            fridaySelected = _item.WorkingDays.Any(x => x == (int)DayOfWeek.Friday);
        }

        isTimerOn = _item.SettingMode == SettingMode.Timer;
        startAt = _item.StartAt.ToTimeSpan();
        endAt = _item.EndAt.ToTimeSpan();
        _loading = false;
    }

    void UpdatePage(DeviceHubUpdateDto values)
    {
        if (_item.Id.ToString() == values.DeviceId.ToString())
        {
            _item.Humidity = values.Humidity;
            _item.Temperature = values.Temperature;
            _item.Voltage = values.Voltage;
            _item.Current = values.Current;
            _item.IsOn = values.IsOn;
            InvokeAsync(StateHasChanged);
        }
    }

    public void OpenDatePickerDialog()
    {
        var parameters = new DialogParameters<CustomDatePicker> { { x => x.id, _item.Id } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };
        DialogService.Show<CustomDatePicker>("چارت", parameters, options);
    }

    private async Task DeleteDevice()
    {
        DialogOptions options = new()
        {
            FullScreen = false,
            MaxWidth = MaxWidth.Small
        };
        var result = await DialogService.Show<DeleteDevice>("حذف دستگاه", options).Result;
        if ((bool)result.Data)
        {
            _loading = true;
            var deleteResult = await DeviceService.DeleteDeviceAsync(_item.Id);
            if (!deleteResult.Success)
            {
                SnackbarService.Add(deleteResult.Error!.ErrorMessage, Severity.Error);
                _loading = false;
                return;
            }

            NavigationManager.NavigateTo("/devices");
            _loading = false;
        }
    }

    async Task ToggleManually()
    {
        _loading = true;
        ResponseData<NoContent> updateResult = await DeviceService.ToggleManuallyAsync(_item.Id);
        if (!updateResult.Success)
        {
            SnackbarService.Add(updateResult.Error!.ErrorMessage, Severity.Error);
            _loading = false;
            return;
        }

        _loading = false;
        NavigationManager.Refresh();
    }

    async Task UpdateTimer()
    {
        if (endAt is not null && startAt is not null)
        {
            _loading = true;
            UpdateDeviceRequest timer = new()
            {
                StartTime = TimeOnly.FromTimeSpan(startAt.Value),
                EndTime = TimeOnly.FromTimeSpan(endAt.Value),
                DayOfWeeks = DaysOfWeek()
            };
            ResponseData<NoContent> updateResult = await DeviceService.UpdateTimer(_item.Id, timer);
            if (!updateResult.Success)
            {
                SnackbarService.Add(updateResult.Error!.ErrorMessage, Severity.Error);
                _loading = false;
                return;
            }

            _loading = false;
            NavigationManager.Refresh();
        }
        else
        {
            SnackbarService.Add("لطفا بازه زمانی را انتخاب نمایید", Severity.Error);
        }
    }

    int[] DaysOfWeek()
    {
        List<int> days = new();
        if (sundaySelected) days.Add(0);
        if (mondaySelected) days.Add(1);
        if (tuesdaySelected) days.Add(2);
        if (wednesdaySelected) days.Add(3);
        if (thursdaySelected) days.Add(4);
        if (fridaySelected) days.Add(5);
        if (saturdaySelected) days.Add(6);
        return days.ToArray();
    }

    public async ValueTask DisposeAsync()
    {
        await connection.DisposeAsync();
    }

}