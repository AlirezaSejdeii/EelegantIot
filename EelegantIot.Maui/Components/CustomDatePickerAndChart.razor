@using System.Globalization
@using EelegantIot.Shared.Requests.ChartData
@if (loading)
{
    <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Height="60px" Class="mt-6"/>
}
else
{
    @if (dateDialog)
    {
        <MudDialog>
            <DialogContent>
                <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                    <InputPersianDatePicker @bind-value="startDate" MinDateSetOnToday="false" CssClass="form-control" Style="width:100%" Placeholder="شروع بازه" DigitType="DigitType.English"/>
                </MudStack>
                <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="10" Class="p-2">
                    <InputPersianDatePicker @bind-value="endDate" MinDateSetOnToday="false" CssClass="form-control" Style="width:100%" Placeholder="انتهای بازه" DigitType="DigitType.English"/>
                </MudStack>
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Primary" OnClick="Submit" FullWidth>تایید</MudButton>
            </DialogActions>
        </MudDialog>
    }
    else
    {
        <MudDialog>
            <DialogContent>
                <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="_labels.ToArray()" Width="100%" Height="500px" ChartOptions="chartOptions"/>
            </DialogContent>
        </MudDialog>
    }
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] DeviceService DeviceService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Parameter] public Guid id { get; set; }
    [Parameter] public string whichSerieToShow { get; set; }
    DateRange dateRange = new();
    string startDate;
    string endDate;
    ChartDataRequest dateRequest = new();
    bool loading;
    bool dateDialog = true;

    List<ChartSeries> _series = new();
    List<string> _labels;
    string[] _xaxis;
    ChartOptions chartOptions = new();

    async Task Submit()
    {
        chartOptions.YAxisTicks = 10;
        if (string.IsNullOrEmpty(startDate) || string.IsNullOrEmpty(endDate))
        {
            Snackbar.Add("لطفا بازه زمانی را انتخاب کنید", Severity.Error);
        }

        PersianCalendar pa = new();
        dateRange.Start = pa.ToDateTime(int.Parse(startDate.Substring(0, 4)), int.Parse(startDate.Substring(5, 2)), int.Parse(startDate.Substring(8, 2)), 0, 0, 0, 0);
        dateRange.End = pa.ToDateTime(int.Parse(endDate.Substring(0, 4)), int.Parse(endDate.Substring(5, 2)), int.Parse(endDate.Substring(8, 2)), 0, 0, 0, 0);

        if (dateRange.Start is not null && dateRange.End is not null)
        {
            dateRequest.StartDate = dateRange.Start.Value;
            dateRequest.EndDate = dateRange.End.Value;
            var chartData = await DeviceService.GetDeviceChart(id, dateRequest);
            if (!chartData.Success)
            {
                Snackbar.Add("متاسفانه قادر به واکشی دیتا نیست", Severity.Error);
            }
            else
            {
                if (chartData.Data!.Series.FirstOrDefault(x => x.Name == whichSerieToShow) is { } item)
                {
                    _series.Add(new ChartSeries
                    {
                        Name = item.Name,
                        Data = item.Numbers.ToArray()
                    });

                    _labels = chartData.Data.Labels.Select(x => $"{pa.GetYear(x.Date)}/{pa.GetMonth(x.Date)}/{pa.GetDayOfMonth(x.Date)}").ToList();

                    HashSet<string> seen = new HashSet<string>();
                    for (int i = 0; i < _labels.Count; i++)
                    {
                        if (seen.Contains(_labels[i]))
                        {
                            _labels[i] = string.Empty;
                        }
                        else
                        {
                            seen.Add(_labels[i]);
                        }
                    }
                }

                dateDialog = false;
            }
        }
    }

}